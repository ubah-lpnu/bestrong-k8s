trigger:
  branches:
    include:
      - main
  paths:
    include:
      - bestrong-helm-chart/*
    exclude:
      - '*'

variables:
  - group: lib-bestrong-k8s
  - name: clusterName
    value: bestrong_cluster
  - name: resourceGroup
    value: bestrong-rg
  - name: chartACRName
    value: 'imagewebregistry.azurecr.io'
  - name: chartPath
    value: './bestrong-api-helm'
  - name: chartVersion
    value: '1.0.$(chartCounter)'
  - name: chartName
    value: 'bestrong-api'
  - name: chartCounter
    value: $[counter(variables['appVersion'], 1)]

 

stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: HelmInstaller@0
        inputs:
          helmVersion: '2.14.1'
          installKubectl: true

      - script: |
          helm lint $(chartPath)
        displayName: 'Lint Helm chart'
        continueOnError: true

      - script: |
          helm package --version $(chartVersion) $(chartPath)
        displayName: 'Package Helm chart'

      - script: |
          helm registry login $(chartACRName) --username $(ACR_USERNAME) --password $(ACR_PASSWORD)
        displayName: 'Login to Helm charts ACR'
      
      - script: |
          helm push $(chartName)-$(chartVersion).tgz oci://$(chartACRName)/helm
        displayName: 'Push helm chart to ACR'

      
- stage: Deploy
  condition: and(succeeded('Build'), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployHelmToAKS
    pool:
     vmImage: 'ubuntu-latest'
    environment: prod
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: HelmInstaller@0
            inputs:
              helmVersion: '2.14.1'
              installKubectl: true

          - script: |
              helm registry login $(chartACRName) --username $(ACR_USERNAME) --password $(ACR_PASSWORD)
            displayName: 'Login to Helm charts ACR'

          - script: |
              helm pull oci://$(chartACRName)/helm/$(chartName) --version $(chartVersion) -d $(Pipeline.Workspace)
            displayName: 'Pull helm chart from ACR'
          
          - task: AzureCLI@2
            displayName: Login to AKS
            inputs:
              azureSubscription: 'Azure subscription 1(740d6962-3a0d-48e7-9ccc-a962da968e9f)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: 'az aks get-credentials -n $(clusterName) -g $(resourceGroup)'
          - task: AzureCLI@2
            displayName: Change deployment color
            inputs:
              azureSubscription: 'Azure subscription 1(740d6962-3a0d-48e7-9ccc-a962da968e9f)'
              scriptType: 'bash'
              scriptLocation: 'scriptPath'
              scriptPath: './test.sh'
              workingDirectory: '$(Build.SourcesDirectory)'
              
          - task: HelmDeploy@0
            displayName: Deploy new version
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: 'BestrongAKS'
              namespace: 'default'
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: '$(Pipeline.Workspace)/$(chartName)-$(chartVersion).tgz'
              chartVersion: '$(chartVersion)'
              releaseName: 'bestrong'
              arguments: '--set $(color)Image.enabled=true --set $(deleteDeployment)Image.enabled=true --debug'
          - task: HelmDeploy@0
            displayName: Route traffic
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: 'BestrongAKS'
              namespace: 'default'
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: '$(Pipeline.Workspace)/$(chartName)-$(chartVersion).tgz'
              chartVersion: '$(chartVersion'
              releaseName: 'bestrong'
              overrideValues: 'prodSlot=$(color)'
              install: false
              arguments: '--reuse-values --debug'
          - task: Kubernetes@1
            displayName: Delete old Deployment
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'BestrongAKS'
              namespace: 'default'
              command: 'delete'
              arguments: 'deploy $(chartName)-$(deleteDeployment)'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
            condition: ne(variables['deleteDeployment'], 'none')
        
